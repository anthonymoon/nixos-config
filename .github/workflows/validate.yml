name: Validate NixOS Configuration

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: true

      - name: Check flake syntax and evaluation
        run: |
          echo "üîç Checking flake syntax and evaluation..."
          nix flake check --show-trace

      - name: Validate NixOS configuration build
        run: |
          echo "üèóÔ∏è Testing NixOS configuration build..."
          nix build .#nixosConfigurations.x86_64-linux.config.system.build.toplevel --show-trace --dry-run

      - name: Check for evaluation warnings
        run: |
          echo "‚ö†Ô∏è Checking for evaluation warnings..."
          nix eval .#nixosConfigurations.x86_64-linux.config.warnings --json

      - name: Validate package availability
        run: |
          echo "üì¶ Validating all packages are available..."
          nix build .#nixosConfigurations.x86_64-linux.config.environment.systemPackages --show-trace --dry-run

  vm-test:
    name: VM Integration Test
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            system-features = nixos-test benchmark big-parallel kvm

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run VM integration test
        run: |
          echo "üöÄ Running VM integration tests..."
          nix build .#checks.x86_64-linux.vm-test -L

  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Check for known vulnerabilities
        run: |
          echo "üîí Checking for known security issues..."
          # Check for insecure packages
          nix eval .#nixosConfigurations.x86_64-linux.config.nixpkgs.config.permittedInsecurePackages --json || echo "No insecure packages permitted"
          
          # Validate SSH configuration
          nix eval .#nixosConfigurations.x86_64-linux.config.services.openssh.settings --json | jq '.PasswordAuthentication, .PermitRootLogin'

  format-check:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Check Nix formatting
        run: |
          echo "üìù Checking Nix code formatting..."
          nix run nixpkgs#nixfmt-classic -- --check **/*.nix

      - name: Lint Nix code
        run: |
          echo "üîé Linting Nix code..."
          nix run nixpkgs#statix -- check .

      - name: Check for dead code
        run: |
          echo "üßπ Checking for dead code..."
          nix run nixpkgs#deadnix -- --check .
name: Staging Branch - Full Integration Tests

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, ready_for_review ]

env:
  STAGING_VM_HOST: "staging-vm.ad.dirtybit.co"  # Replace with your staging VM
  SSH_USER: "amoon"

jobs:
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Validate configuration
        run: |
          echo "üîç Pre-flight validation..."
          nix flake check --show-trace
          
          # Test both VM and bare metal configurations
          echo "Testing VM configuration..."
          nix build .#nixosConfigurations.x86_64-linux.config.system.build.toplevel --dry-run
          
          echo "Checking for breaking changes..."
          # Add any specific breaking change detection here

  deploy-staging:
    name: Deploy to Staging VM
    runs-on: ubuntu-latest
    needs: pre-flight
    if: github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_VM_SSH_KEY }}

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Build and deploy
        run: |
          echo "üèóÔ∏è Building staging configuration..."
          nix build .#nixosConfigurations.x86_64-linux.config.system.build.toplevel
          
          echo "üì¶ Deploying to staging VM..."
          nix copy --to ssh://$SSH_USER@$STAGING_VM_HOST ./result
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            set -e
            
            # Backup current state
            CURRENT_GEN=$(readlink /nix/var/nix/profiles/system)
            echo $CURRENT_GEN > /tmp/staging-backup-generation
            
            # Deploy new configuration
            sudo nix-env -p /nix/var/nix/profiles/system --set $(readlink ./result)
            sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
            
            echo "‚úÖ Staging deployment completed"
          EOF

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_VM_SSH_KEY }}

      - name: Wait for system stabilization
        run: |
          echo "‚è≥ Waiting for system stabilization..."
          sleep 60
          
          # Ensure SSH is available
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 $SSH_USER@$STAGING_VM_HOST "echo 'Ready'"; then
              break
            fi
            echo "Waiting for SSH... ($i/10)"
            sleep 30
          done

      - name: System Health Tests
        run: |
          echo "üè• Running system health tests..."
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            set -e
            
            echo "=== System Boot Status ==="
            systemctl is-system-running
            
            echo "=== Core Services ==="
            for service in sshd systemd-networkd systemd-resolved; do
              if systemctl is-enabled $service &>/dev/null; then
                systemctl is-active $service && echo "‚úÖ $service" || echo "‚ùå $service"
              fi
            done
            
            echo "=== Network Stack ==="
            # Test DNS resolution
            nslookup google.com 8.8.8.8
            
            # Test external connectivity
            curl -I --connect-timeout 10 https://google.com
            
            echo "=== File Systems ==="
            df -h
            mount | grep -E "(ext4|xfs|zfs|btrfs)"
            
            echo "=== Memory and CPU ==="
            free -h
            uptime
            
            echo "‚úÖ System health tests passed"
          EOF

      - name: Service Integration Tests
        run: |
          echo "üîß Running service integration tests..."
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            set -e
            
            echo "=== Docker Service ==="
            if systemctl is-enabled docker &>/dev/null; then
              systemctl is-active docker
              docker version
              docker run --rm hello-world
              echo "‚úÖ Docker integration test passed"
            fi
            
            echo "=== SSH Configuration ==="
            # Test SSH key authentication
            ssh-keygen -t ed25519 -f /tmp/test_key -N ""
            cat /tmp/test_key.pub >> ~/.ssh/authorized_keys
            ssh -o StrictHostKeyChecking=no -i /tmp/test_key localhost "echo 'SSH key auth works'"
            rm /tmp/test_key /tmp/test_key.pub
            sed -i '$d' ~/.ssh/authorized_keys
            echo "‚úÖ SSH integration test passed"
            
            echo "=== Package Availability ==="
            # Test key packages are available
            command -v git
            command -v nvim || command -v vim
            command -v zsh
            command -v docker
            echo "‚úÖ Package availability test passed"
            
            echo "=== User Environment ==="
            # Test user shell and environment
            echo $SHELL | grep zsh
            ls -la ~/.config/ || true
            echo "‚úÖ User environment test passed"
          EOF

      - name: Performance Tests
        run: |
          echo "‚ö° Running performance tests..."
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            set -e
            
            echo "=== Boot Time Analysis ==="
            systemd-analyze
            systemd-analyze blame | head -10
            
            echo "=== Memory Usage ==="
            free -h
            ps aux --sort=-%mem | head -10
            
            echo "=== Disk I/O ==="
            iostat 1 3 || echo "iostat not available"
            
            echo "=== Network Performance ==="
            iperf3 -c iperf.he.net -t 10 -p 5201 || echo "iperf3 test skipped"
            
            echo "‚úÖ Performance tests completed"
          EOF

      - name: Security Tests
        run: |
          echo "üîí Running security tests..."
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            set -e
            
            echo "=== User Permissions ==="
            # Test sudo access
            sudo -l | grep NOPASSWD
            
            echo "=== SSH Configuration ==="
            sudo sshd -T | grep -E "(PasswordAuthentication|PermitRootLogin|Port)"
            
            echo "=== Firewall Status ==="
            sudo iptables -L || echo "iptables not configured"
            
            echo "=== File Permissions ==="
            ls -la /etc/shadow
            ls -la ~/.ssh/
            
            echo "=== Process Security ==="
            ps aux | grep -E "(root|amoon)" | head -10
            
            echo "‚úÖ Security tests passed"
          EOF

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Integration tests failed, rolling back staging..."
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            if [ -f /tmp/staging-backup-generation ]; then
              PREV_GEN=$(cat /tmp/staging-backup-generation)
              echo "Rolling back to: $PREV_GEN"
              sudo nix-env -p /nix/var/nix/profiles/system --set $PREV_GEN
              sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
              echo "‚úÖ Rollback completed"
            fi
          EOF

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_VM_SSH_KEY }}

      - name: Stress test system
        run: |
          echo "üí™ Running load tests..."
          
          ssh -o StrictHostKeyChecking=no $SSH_USER@$STAGING_VM_HOST << 'EOF'
            set -e
            
            echo "=== CPU Stress Test ==="
            timeout 60 stress --cpu $(nproc) --timeout 30s || echo "Stress test completed"
            
            echo "=== Memory Test ==="
            timeout 60 stress --vm 2 --vm-bytes 1G --timeout 30s || echo "Memory test completed"
            
            echo "=== I/O Test ==="
            timeout 60 stress --io 4 --timeout 30s || echo "I/O test completed"
            
            echo "=== System Status After Load ==="
            uptime
            free -h
            systemctl is-system-running
            
            echo "‚úÖ Load tests passed"
          EOF

  approval-gate:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    needs: [integration-tests, load-tests]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    environment: production-approval
    
    steps:
      - name: Request manual approval
        run: |
          echo "üö® Manual approval required for production deployment"
          echo "All automated tests have passed."
          echo "Review the staging environment and approve if ready for production."
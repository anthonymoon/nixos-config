#!/usr/bin/env bash
set -exu

check_installer() {
  if [ -e /etc/NIXOS ]; then
    echo -e "\e[1;32mRunning in the NixOS installer environment.\e[0m"
  else
    echo -e "\e[1;31mNot running in the NixOS installer environment.\e[0m"
    exit 1
  fi
}

cleanup() {
  rm -rf nixos-config-main.zip nixos-config-main nixos-config
}

download_config() {
  curl -LJ0 https://github.com/anthonymoon/nixos-config/archive/main.zip -o nixos-config-main.zip
  unzip nixos-config-main.zip
  mv nixos-config-main/templates/starter nixos-config
  cd nixos-config
}

run_apply() {
  ./apps/x86_64-linux/apply
  if [ ! -f /tmp/username.txt ]; then
    echo -e "\e[1;31mError: /tmp/username.txt does not exist.\e[0m"
    exit 1
  fi
  export USERNAME=$(cat /tmp/username.txt)
}

partition_disk() {
  echo -e "\e[1;32mPartitioning /dev/vda for rock-solid boot...\e[0m"
  
  # Unmount any existing mounts
  sudo umount -R /mnt 2>/dev/null || true
  
  # Detect if disk exists
  if [ ! -b "/dev/vda" ]; then
    echo -e "\e[1;31mError: /dev/vda not found. Available disks:\e[0m"
    lsblk
    exit 1
  fi
  
  # Wipe existing partition table
  sudo wipefs -af /dev/vda
  sudo sgdisk --zap-all /dev/vda
  
  # Create new GPT partition table
  sudo parted /dev/vda --script -- mklabel gpt
  
  # Create EFI System Partition (512MB)
  sudo parted /dev/vda --script -- mkpart ESP fat32 1MB 513MB
  sudo parted /dev/vda --script -- set 1 esp on
  
  # Create root partition (remaining space)
  sudo parted /dev/vda --script -- mkpart primary 513MB 100%
  
  # Wait for kernel to recognize partitions
  sleep 2
  sudo partprobe /dev/vda
  sleep 2
  
  # Verify partitions exist
  if [ ! -b "/dev/vda1" ] || [ ! -b "/dev/vda2" ]; then
    echo -e "\e[1;31mError: Partitions not created properly\e[0m"
    lsblk /dev/vda
    exit 1
  fi
  
  # Format EFI partition
  sudo mkfs.fat -F32 -n NIXOS-BOOT /dev/vda1
  
  # Format root partition  
  sudo mkfs.ext4 -L NIXOS-ROOT /dev/vda2
  
  echo -e "\e[1;32mPartitioning complete:\e[0m"
  lsblk /dev/vda
}

mount_filesystems() {
  echo -e "\e[1;32mMounting filesystems...\e[0m"
  
  # Mount root filesystem
  sudo mount /dev/vda2 /mnt
  
  # Create and mount boot directory
  sudo mkdir -p /mnt/boot
  sudo mount /dev/vda1 /mnt/boot
  
  # Verify mounts
  if ! mountpoint -q /mnt || ! mountpoint -q /mnt/boot; then
    echo -e "\e[1;31mError: Filesystems not mounted properly\e[0m"
    mount | grep /mnt
    exit 1
  fi
  
  echo -e "\e[1;32mFilesystems mounted successfully:\e[0m"
  df -h /mnt /mnt/boot
}

setup_files() {
  sudo mkdir -p /mnt/etc/nixos
  sudo cp -r * /mnt/etc/nixos
  cd /mnt/etc/nixos
}

generate_hardware_config() {
  echo -e "\e[1;32mGenerating hardware configuration...\e[0m"
  
  # Ensure target directory exists
  sudo mkdir -p /mnt/etc/nixos/hosts/nixos
  
  # Generate hardware config with proper validation
  if ! sudo nixos-generate-config --show-hardware-config > /tmp/hardware-config.nix; then
    echo -e "\e[1;31mError: Failed to generate hardware configuration\e[0m"
    exit 1
  fi
  
  # Validate hardware config was generated properly
  if [ ! -s /tmp/hardware-config.nix ]; then
    echo -e "\e[1;31mError: Hardware configuration file is empty\e[0m"
    exit 1
  fi
  
  # Verify it contains required filesystem entries
  if ! grep -q "fileSystems.\"/\"" /tmp/hardware-config.nix; then
    echo -e "\e[1;31mError: Hardware config missing root filesystem\e[0m"
    exit 1
  fi
  
  # Check for boot filesystem (could be /boot or /boot/efi)
  if ! grep -q "fileSystems.\"/boot" /tmp/hardware-config.nix; then
    echo -e "\e[1;33mWarning: No boot filesystem detected, adding manual entry\e[0m"
    # Add boot filesystem entry manually
    sudo sed -i '/fileSystems."\/" =/a\\n  fileSystems."/boot" =\n    { device = "/dev/disk/by-uuid/'"$(sudo blkid -s UUID -o value /dev/vda1)"'";\n      fsType = "vfat";\n      options = [ "fmask=0077" "dmask=0077" ];\n    };' /tmp/hardware-config.nix
  fi
  
  # Copy validated config to final location
  sudo cp /tmp/hardware-config.nix /mnt/etc/nixos/hosts/nixos/hardware-configuration.nix
  sudo rm /tmp/hardware-config.nix
  
  echo -e "\e[1;32mHardware configuration generated and validated:\e[0m"
  echo "  Root: $(grep 'device.*/' /mnt/etc/nixos/hosts/nixos/hardware-configuration.nix | head -1)"
  echo "  Boot: $(grep 'device.*boot' /mnt/etc/nixos/hosts/nixos/hardware-configuration.nix | head -1)"
}

validate_configuration() {
  echo -e "\e[1;32mValidating NixOS configuration...\e[0m"
  
  # Verify flake.nix exists and is valid
  if [ ! -f "flake.nix" ]; then
    echo -e "\e[1;31mError: flake.nix not found\e[0m"
    exit 1
  fi
  
  # Check if hardware config exists and has correct structure
  if [ ! -f "hosts/nixos/hardware-configuration.nix" ]; then
    echo -e "\e[1;31mError: hardware-configuration.nix not found\e[0m"
    exit 1
  fi
  
  # Verify hardware config contains UUIDs, not labels
  if grep -q "by-partlabel" hosts/nixos/hardware-configuration.nix; then
    echo -e "\e[1;31mError: Hardware config contains partition labels instead of UUIDs\e[0m"
    exit 1
  fi
  
  # Test flake evaluation
  if ! nix flake check --no-build 2>/dev/null; then
    echo -e "\e[1;31mError: Flake configuration is invalid\e[0m"
    exit 1
  fi
  
  echo -e "\e[1;32mConfiguration validation passed\e[0m"
}

install_nixos() {
  ARCH=$(uname -m)

  case "$ARCH" in
    x86_64)
      FLAKE_TARGET="x86_64-linux"
      ;;
    aarch64)
      FLAKE_TARGET="aarch64-linux"
      ;;
    *)
      echo -e "\e[1;31mUnsupported architecture: $ARCH\e[0m"
      exit 1
      ;;
  esac

  echo -e "\e[1;32mInstalling NixOS with configuration $FLAKE_TARGET...\e[0m"
  
  # Install with verbose output for debugging
  if ! sudo nixos-install --flake .#$FLAKE_TARGET --no-root-passwd $@; then
    echo -e "\e[1;31mError: NixOS installation failed\e[0m"
    exit 1
  fi
  
  # Set proper permissions
  sudo chmod -R 775 /mnt/etc/nixos
  
  # Verify bootloader installation
  if [ ! -f "/mnt/boot/EFI/systemd/systemd-bootx64.efi" ] && [ ! -f "/mnt/boot/EFI/BOOT/BOOTX64.EFI" ]; then
    echo -e "\e[1;33mWarning: EFI bootloader may not be installed correctly\e[0m"
  fi
  
  echo -e "\e[1;32mNixOS installation completed successfully\e[0m"
}

prompt_reboot() {
  echo -e "\e[1;33mInstallation complete. Please reboot manually.\e[0m"
}

cleanup
check_installer
download_config
run_apply
partition_disk
mount_filesystems
setup_files
generate_hardware_config
validate_configuration
install_nixos
cleanup
prompt_reboot
